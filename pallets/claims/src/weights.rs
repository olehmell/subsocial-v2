//! Autogenerated weights for pallet_claims
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-09-10, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./scripts/../target/release/subsocial-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// Compiled
// --pallet
// pallet_claims
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages
// 4096
// --output
// ./pallets/claims/src/weights.rs
// --template
// ./.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_claims.
pub trait WeightInfo {
	fn claim_tokens() -> Weight;
	fn set_rewards_sender() -> Weight;
	fn add_eligible_accounts() -> Weight;
}

/// Weights for pallet_claims using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn claim_tokens() -> Weight {
		(98_277_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn set_rewards_sender() -> Weight {
		(26_179_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn add_eligible_accounts() -> Weight {
		(64_541_494_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn claim_tokens() -> Weight {
		(98_277_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn set_rewards_sender() -> Weight {
		(26_179_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn add_eligible_accounts() -> Weight {
		(64_541_494_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
